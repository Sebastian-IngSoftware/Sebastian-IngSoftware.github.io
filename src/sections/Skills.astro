---
import { skills } from "@/content/Skills";

const mainSkillIcons = ['laravel', 'react', 'fastapi', 'docker'];
const mainSkills = skills.filter(s => mainSkillIcons.includes(s.icon));
const otherSkills = skills.filter(s => !mainSkillIcons.includes(s.icon));

---

<style>
  .skill-details {
    max-height: 0;
    overflow: hidden;
    transition: max-height 260ms ease, padding 260ms ease;
    padding: 0 1rem;
  }

  .skill-details.expanded {
    max-height: 500px; /* reasonable max for details area */
    padding: 1rem;
  }

  .level-fill {
    background: linear-gradient(90deg, var(--color-accent), var(--color-success));
    transition: width 0.5s ease;
  }

  .main-skill-desc {
    display: block;
  }
</style>

<div class="bg-secondary p-6 rounded-xl border border-tertiary">
  <div class="mb-6">
    <h3 class="m-0 text-success text-xl sm:text-2xl font-bold">Current Focus</h3>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mt-4">
      {mainSkills.map((ms) => (
    <article class="relative flex flex-col p-4 sm:p-5 rounded-xl border border-border bg-surface hover:shadow-2xl hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-accent">
          <div class="absolute left-0 top-0 bottom-0 w-1 bg-accent rounded-r-md"></div>
          <div class="flex items-start gap-4 pl-3">
            <div class="w-14 h-14 flex items-center justify-center rounded-lg bg-white border border-border shrink-0 shadow-sm">
              <img src={`/svgs/${ms.icon}.svg`} alt={ms.skill + ' icon'} class="w-9 h-9 object-contain" loading="lazy" />
            </div>
            <div class="flex-1 min-w-0">
              <h4 class="text-text font-bold text-sm truncate">{ms.skill}</h4>
              <div class="flex items-center gap-2 mt-1">
                <span class={`inline-block text-xs px-2 py-0.5 rounded-full uppercase tracking-wide ${ms.status === 'learning' ? 'bg-tertiary text-text' : ''} ${ms.status === 'proficient' ? 'bg-accent text-background' : ''} ${ms.status === 'expert' ? 'bg-success text-background' : ''}`}>
                  {ms.status}
                </span>
                <span class="text-text-muted text-xs">Level {ms.level}/10</span>
              </div>
            </div>
          </div>

          <div class="mt-3 flex-1">
            <p class="text-text-muted text-sm leading-relaxed main-skill-desc">{ms.description}</p>
          </div>

          <div class="w-full mt-4">
            <div class="flex items-center justify-between gap-3">
              <div class="flex-1 h-2 bg-tertiary rounded-full overflow-hidden">
                <div class="level-fill h-full" style={`width: ${ms.level * 10}%`}></div>
              </div>
              <div class="text-text text-xs w-12 text-right">{ms.level * 10}%</div>
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>

  </div>
  <div class="p-6 rounded-xl border border-tertiary">

    <h3 class="m-0 text-success text-xl sm:text-2xl font-bold">Technical Skills</h3>
    
    <div class="flex flex-col sm:flex-row gap-2 sm:gap-3 items-start sm:items-center py-5">
      <label class="text-text text-sm font-medium">Sort by:</label>
      <select 
        class="bg-surface text-text border border-border rounded-md px-3 py-2 text-sm cursor-pointer focus:outline-none focus:border-accent transition-colors" 
        onchange="sortSkills(this.value)"
      >
        <option value="level">Level (High to Low)</option>
        <option value="name">Name (A-Z)</option>
      </select>
      
      <select 
        class="bg-surface text-text border border-border rounded-md px-3 py-2 text-sm cursor-pointer focus:outline-none focus:border-accent transition-colors" 
        id="categoryFilter" 
        onchange="filterByCategory(this.value)"
      >
        <option value="all">All Categories</option>
        <option value="frontend">Frontend</option>
        <option value="backend">Backend</option>
        <option value="devops">DevOps</option>
        <option value="database">Database</option>
        <option value="architecture">Architecture</option>
        <option value="tools">Tools</option>
        <option value="IA">AI/ML</option>
        <option value="other">Other</option>
      </select>
    </div>
  
  <!-- Skills Grid -->
  <div id="skillsContainer" class="grid grid-cols-1 sm:grid-cols-[repeat(auto-fill,minmax(280px,1fr))] gap-3">
    {otherSkills.map((skill, index) => (
      <div 
        class="
          bg-surface border border-border rounded-lg p-4 
          transition-all duration-300 cursor-pointer
          hover:-translate-y-0.5 hover:shadow-lg hover:shadow-accent/20
        "
        data-level={skill.level}
        data-status={skill.status}
        data-categories={skill.category.join(',')}
        data-name={skill.skill}
        onclick={`toggleSkill(${index})`}
      >
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-2 sm:gap-3 min-w-0 flex-1">
            <div class="w-8 h-8 bg-white rounded-md flex items-center justify-center">
              <img src={`/svgs/${skill.icon}.svg`} alt={skill.skill + ' icon'} class="w-full h-full object-contain" loading="lazy" style="display:block;" />
            </div>
            <div class="min-w-0 flex-1">
              <h4 class="m-0 text-text text-sm sm:text-base font-semibold truncate">{skill.skill}</h4>
              <span class={`
                inline-block px-2 py-0.5 rounded-xl text-xs mt-0.5
                ${skill.status === 'learning' ? 'bg-tertiary text-text' : ''}
                ${skill.status === 'proficient' ? 'bg-accent text-background' : ''}
                ${skill.status === 'expert' ? 'bg-success text-background' : ''}
              `}>
                {skill.status}
              </span>
            </div>
          </div>
          <div class="text-text-muted text-xl" id={`arrow-${index}`}>
            ▼
          </div>
        </div>
        
        <div class="w-full h-1.5 bg-tertiary rounded-full overflow-hidden my-2">
          <div class="level-fill h-full" style={`width: ${skill.level * 10}%`}></div>
        </div>
        
        <div class="skill-details" id={`details-${index}`}>
          <div class="bg-primary p-3 rounded-md mb-3">
            <p class="
              m-0 text-text-muted leading-relaxed text-sm 
              prose prose-sm prose-invert max-w-none
              prose-p:text-text-muted prose-p:leading-relaxed
            ">
              {skill.description}
            </p>
          </div>
          
          <div class="mb-2">
            <strong class="text-accent text-sm font-semibold">Level:</strong>
            <span class="text-text ml-2 text-sm">{skill.level}/10</span>
          </div>
          
          <div>
            <strong class="text-accent text-sm font-semibold">Categories:</strong>
            <div class="mt-1 flex flex-wrap gap-1">
              {skill.category.map((cat) => (
                <span class="
                  inline-block px-2 py-0.5 bg-tertiary text-text 
                  rounded-xl text-xs
                ">
                  {cat}
                </span>
              ))}
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>
  </div>


<script>
  function toggleSkill(index: number) {
    const details = document.getElementById(`details-${index}`);
    const arrow = document.getElementById(`arrow-${index}`);
    
    if (details && arrow) {
      if (details.classList.contains('expanded')) {
        details.classList.remove('expanded');
        arrow.textContent = '▼';
      } else {
        details.classList.add('expanded');
        arrow.textContent = '▲';
      }
    }
  }

  function sortSkills(sortBy: string) {
    const container = document.getElementById('skillsContainer');
    if (!container) return;

    const skillItems = Array.from(container.children) as HTMLElement[];
    
    skillItems.sort((a, b) => {
      switch (sortBy) {
        case 'level':
          return parseInt(b.dataset.level || '0') - parseInt(a.dataset.level || '0');
        case 'status':
          const statusOrder = { 'expert': 3, 'proficient': 2, 'learning': 1 };
          const statusA = a.dataset.status as keyof typeof statusOrder;
          const statusB = b.dataset.status as keyof typeof statusOrder;
          return (statusOrder[statusB] || 0) - (statusOrder[statusA] || 0);
        case 'name':
          return (a.dataset.name || '').localeCompare(b.dataset.name || '');
        case 'category':
          const catA = (a.dataset.categories || '').split(',')[0];
          const catB = (b.dataset.categories || '').split(',')[0];
          return catA.localeCompare(catB);
        default:
          return 0;
      }
    });

    skillItems.forEach(item => container.appendChild(item));
  }

  function filterByCategory(category: string) {
    const container = document.getElementById('skillsContainer');
    if (!container) return;

    const skillItems = Array.from(container.children) as HTMLElement[];
    
    skillItems.forEach(item => {
      const categories = item.dataset.categories || '';
      if (category === 'all' || categories.includes(category)) {
        item.style.display = 'block';
      } else {
        item.style.display = 'none';
      }
    });
  }

  (window as any).toggleSkill = toggleSkill;
  (window as any).sortSkills = sortSkills;
  (window as any).filterByCategory = filterByCategory;

  document.addEventListener('DOMContentLoaded', () => {
    sortSkills('level');
  });
</script>
